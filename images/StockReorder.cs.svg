<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.0//EN" "http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd">
<svg width="967.14" height="1398.29" xmlns="http://www.w3.org/2000/svg">
<rect width="867.14" height="1358.29" fill="#282828" x="40.00px" y="20.00px"/>
<g font-family="Jetbrains Mono" font-size="12.00px" fill="#ebdbb2" clip-path="url(#terminalMask)">
<text x="60.00px" y="54.40px" xml:space="preserve">﻿
</text><text x="60.00px" y="68.80px" xml:space="preserve"><tspan fill="#fe8019">using</tspan> View;
</text><text x="60.00px" y="83.20px" xml:space="preserve">
</text><text x="60.00px" y="97.60px" xml:space="preserve"><tspan fill="#fe8019">namespace</tspan> Model;
</text><text x="60.00px" y="112.00px" xml:space="preserve">
</text><text x="60.00px" y="126.40px" xml:space="preserve"><tspan fill="#fe8019">public</tspan> <tspan fill="#fe8019">record</tspan> StockReorder : IDatabaseModel {
</text><text x="60.00px" y="140.80px" xml:space="preserve"><tspan fill="#b8bb26" font-weight="bold">    [PrimaryKey]</tspan>
</text><text x="60.00px" y="155.20px" xml:space="preserve">    <tspan fill="#fe8019">public</tspan> <tspan fill="#fabd2f">int</tspan> Id { <tspan fill="#fe8019">get</tspan>; <tspan fill="#fe8019">set</tspan>; }
</text><text x="60.00px" y="169.60px" xml:space="preserve"><tspan fill="#b8bb26" font-weight="bold">    [ForeignKeyAttribute(typeof(Stock))]</tspan>
</text><text x="60.00px" y="184.00px" xml:space="preserve">    <tspan fill="#fe8019">public</tspan> <tspan fill="#fabd2f">int</tspan> StockId { <tspan fill="#fe8019">get</tspan>; <tspan fill="#fe8019">set</tspan>; }
</text><text x="60.00px" y="198.40px" xml:space="preserve">    <tspan fill="#fe8019">public</tspan> <tspan fill="#fabd2f">int</tspan> Quantity { <tspan fill="#fe8019">get</tspan>; <tspan fill="#fe8019">set</tspan>; }
</text><text x="60.00px" y="212.80px" xml:space="preserve"><tspan fill="#b8bb26" font-weight="bold">    [DateAttribute]</tspan>
</text><text x="60.00px" y="227.20px" xml:space="preserve"><tspan fill="#b8bb26" font-weight="bold">    [InitialValueDate]</tspan>
</text><text x="60.00px" y="241.60px" xml:space="preserve">    <tspan fill="#fe8019">public</tspan> <tspan fill="#fabd2f">string</tspan> OrderDate { <tspan fill="#fe8019">get</tspan>; <tspan fill="#fe8019">set</tspan>; } = String.Empty;
</text><text x="60.00px" y="256.00px" xml:space="preserve"><tspan fill="#b8bb26" font-weight="bold">    [DateAttribute]</tspan>
</text><text x="60.00px" y="270.40px" xml:space="preserve"><tspan fill="#b8bb26" font-weight="bold">    [InitialValueDate]</tspan>
</text><text x="60.00px" y="284.80px" xml:space="preserve">    <tspan fill="#fe8019">public</tspan> <tspan fill="#fabd2f">string</tspan> ExpectedDate { <tspan fill="#fe8019">get</tspan>; <tspan fill="#fe8019">set</tspan>; } = String.Empty;
</text><text x="60.00px" y="299.20px" xml:space="preserve">    <tspan fill="#fe8019">public</tspan> <tspan fill="#fabd2f">string</tspan> Status { <tspan fill="#fe8019">get</tspan>; <tspan fill="#fe8019">set</tspan>; } = String.Empty;
</text><text x="60.00px" y="313.60px" xml:space="preserve">
</text><text x="60.00px" y="328.00px" xml:space="preserve">    <tspan fill="#928374" font-style="italic">/// &lt;summary&gt;</tspan>
</text><text x="60.00px" y="342.40px" xml:space="preserve">    <tspan fill="#928374" font-style="italic">/// TODO: UPDATE STOCK TO USE STOCK</tspan>
</text><text x="60.00px" y="356.80px" xml:space="preserve">    <tspan fill="#928374" font-style="italic">/// &lt;/summary&gt;</tspan>
</text><text x="60.00px" y="371.20px" xml:space="preserve">    <tspan fill="#928374" font-style="italic">/// &lt;returns&gt;&lt;/returns&gt;</tspan>
</text><text x="60.00px" y="385.60px" xml:space="preserve">    <tspan fill="#fe8019">public</tspan> <tspan fill="#fe8019">static</tspan> StockReorder GenerateFakeData()
</text><text x="60.00px" y="400.00px" xml:space="preserve">        =&gt; <tspan fill="#fe8019">new</tspan> Faker&lt;StockReorder&gt;()
</text><text x="60.00px" y="414.40px" xml:space="preserve">            .RuleFor(o =&gt; o.Id, f =&gt; DAL.Query&lt;StockReorder&gt;().Select(x =&gt; x.Id).Max() + <tspan fill="#d3869b">1</tspan>)
</text><text x="60.00px" y="428.80px" xml:space="preserve">            .RuleFor(o =&gt; o.StockId, f =&gt; DAL.Query&lt;Employee&gt;().Select(x =&gt; x.Id).Max() + <tspan fill="#d3869b">1</tspan>)
</text><text x="60.00px" y="443.20px" xml:space="preserve">            .RuleFor(o =&gt; o.Quantity, f =&gt; f.Random.Number(<tspan fill="#d3869b">1_000</tspan>))
</text><text x="60.00px" y="457.60px" xml:space="preserve">            .RuleFor(o =&gt; o.OrderDate, f =&gt; f.Date.Past().ToString())
</text><text x="60.00px" y="472.00px" xml:space="preserve">            .RuleFor(o =&gt; o.ExpectedDate, f =&gt; f.Date.Future().ToString())
</text><text x="60.00px" y="486.40px" xml:space="preserve">            .Generate();
</text><text x="60.00px" y="500.80px" xml:space="preserve">
</text><text x="60.00px" y="515.20px" xml:space="preserve">    <tspan fill="#fe8019">public</tspan> Dictionary&lt;<tspan fill="#fabd2f">string</tspan>, (Action&lt;(List&lt;(<tspan fill="#fabd2f">string</tspan>, Func&lt;<tspan fill="#fabd2f">string</tspan>&gt;)&gt;, IDatabaseModel?)&gt;, <tspan fill="#fabd2f">bool</tspan>)&gt; CreateButtons() {
</text><text x="60.00px" y="529.60px" xml:space="preserve">        <tspan fill="#fe8019">return</tspan> <tspan fill="#fe8019">new</tspan>() {
</text><text x="60.00px" y="544.00px" xml:space="preserve">            { <tspan fill="#b8bb26">&quot;Create&quot;</tspan>, (<tspan fill="#fe8019">new</tspan> Action&lt;(List&lt;(<tspan fill="#fabd2f">string</tspan>, Func&lt;<tspan fill="#fabd2f">string</tspan>&gt;)&gt;, IDatabaseModel?)&gt;(list =&gt; {
</text><text x="60.00px" y="558.40px" xml:space="preserve">                    <tspan fill="#928374" font-style="italic">//ShowGCFR(typeof(FormCreate), typeof(Clean));</tspan>
</text><text x="60.00px" y="572.80px" xml:space="preserve">
</text><text x="60.00px" y="587.20px" xml:space="preserve">                    <tspan fill="#fabd2f">var</tspan> clean = (StockReorder)CreateFromList(list.Item1, list.Item2);
</text><text x="60.00px" y="601.60px" xml:space="preserve">
</text><text x="60.00px" y="616.00px" xml:space="preserve">                    clean?.Delete();
</text><text x="60.00px" y="630.40px" xml:space="preserve">                    clean?.Create();
</text><text x="60.00px" y="644.80px" xml:space="preserve">
</text><text x="60.00px" y="659.20px" xml:space="preserve">                    <tspan fill="#928374" font-style="italic">// TODO: Maybe go to deliveries page?</tspan>
</text><text x="60.00px" y="673.60px" xml:space="preserve">                    ShowGCFR(<tspan fill="#fe8019">typeof</tspan>(FormViewModel), <tspan fill="#fe8019">typeof</tspan>(StockReorder));
</text><text x="60.00px" y="688.00px" xml:space="preserve">
</text><text x="60.00px" y="702.40px" xml:space="preserve">            }), <tspan fill="#fe8019">true</tspan>) },
</text><text x="60.00px" y="716.80px" xml:space="preserve">        };
</text><text x="60.00px" y="731.20px" xml:space="preserve">    }
</text><text x="60.00px" y="745.60px" xml:space="preserve">
</text><text x="60.00px" y="760.00px" xml:space="preserve">    <tspan fill="#fe8019">public</tspan> Dictionary&lt;<tspan fill="#fabd2f">string</tspan>, (Action&lt;IDatabaseModel?&gt;, <tspan fill="#fabd2f">bool</tspan>)&gt; ViewButtons() {
</text><text x="60.00px" y="774.40px" xml:space="preserve">        <tspan fill="#fe8019">return</tspan> <tspan fill="#fe8019">new</tspan>();
</text><text x="60.00px" y="788.80px" xml:space="preserve">    }
</text><text x="60.00px" y="803.20px" xml:space="preserve">
</text><text x="60.00px" y="817.60px" xml:space="preserve">    <tspan fill="#fe8019">public</tspan> IDatabaseModel? CreateFromList(List&lt;(<tspan fill="#fabd2f">string</tspan>, Func&lt;<tspan fill="#fabd2f">string</tspan>&gt;)&gt; list, IDatabaseModel? model) {
</text><text x="60.00px" y="832.00px" xml:space="preserve">        <tspan fill="#fabd2f">var</tspan> clean = <tspan fill="#fe8019">new</tspan> StockReorder();
</text><text x="60.00px" y="846.40px" xml:space="preserve">        <tspan fill="#fabd2f">var</tspan> cleans = DAL.Query&lt;StockReorder&gt;();
</text><text x="60.00px" y="860.80px" xml:space="preserve">
</text><text x="60.00px" y="875.20px" xml:space="preserve">        <tspan fill="#fe8019">if</tspan> (!cleans.Any())
</text><text x="60.00px" y="889.60px" xml:space="preserve">            clean.Id = <tspan fill="#d3869b">0</tspan>;
</text><text x="60.00px" y="904.00px" xml:space="preserve">        <tspan fill="#fe8019">else</tspan> clean.Id = cleans.Select(x =&gt; x.Id).Max() + <tspan fill="#d3869b">1</tspan>;
</text><text x="60.00px" y="918.40px" xml:space="preserve">
</text><text x="60.00px" y="932.80px" xml:space="preserve">        <tspan fill="#fe8019">foreach</tspan> (<tspan fill="#fabd2f">var</tspan> (prop_name, prop_val) <tspan fill="#fe8019">in</tspan> list) {
</text><text x="60.00px" y="947.20px" xml:space="preserve">            <tspan fill="#fabd2f">var</tspan> prop = <tspan fill="#fe8019">typeof</tspan>(StockReorder).GetProperty(prop_name);
</text><text x="60.00px" y="961.60px" xml:space="preserve">            <tspan fill="#fe8019">if</tspan> (prop <tspan fill="#fe8019">is</tspan> <tspan fill="#fe8019">null</tspan>) <tspan fill="#fe8019">continue</tspan>;
</text><text x="60.00px" y="976.00px" xml:space="preserve">            <tspan fill="#fe8019">if</tspan> (model <tspan fill="#fe8019">is</tspan> <tspan fill="#fe8019">null</tspan>) <tspan fill="#fe8019">continue</tspan>;
</text><text x="60.00px" y="990.40px" xml:space="preserve">
</text><text x="60.00px" y="1004.80px" xml:space="preserve">            LOG(<tspan fill="#b8bb26">$&quot;Property: {prop.Name} Property Type: {prop.PropertyType} Settings to: {prop_val()}&quot;</tspan>);
</text><text x="60.00px" y="1019.20px" xml:space="preserve">
</text><text x="60.00px" y="1033.60px" xml:space="preserve">            <tspan fill="#fe8019">if</tspan> (prop.PropertyType == <tspan fill="#fe8019">typeof</tspan>(<tspan fill="#fabd2f">string</tspan>))
</text><text x="60.00px" y="1048.00px" xml:space="preserve">                prop.SetValue(clean, prop_val(), []);
</text><text x="60.00px" y="1062.40px" xml:space="preserve">            <tspan fill="#fe8019">else</tspan> <tspan fill="#fe8019">if</tspan> (prop.PropertyType == <tspan fill="#fe8019">typeof</tspan>(<tspan fill="#fabd2f">bool</tspan>))
</text><text x="60.00px" y="1076.80px" xml:space="preserve">                prop.SetValue(clean, Convert.ToBoolean(prop_val()), []);
</text><text x="60.00px" y="1091.20px" xml:space="preserve">            <tspan fill="#fe8019">else</tspan> <tspan fill="#fe8019">if</tspan> (prop.PropertyType == <tspan fill="#fe8019">typeof</tspan>(<tspan fill="#fabd2f">int</tspan>))
</text><text x="60.00px" y="1105.60px" xml:space="preserve">                prop.SetValue(clean, Convert.ToInt32(prop_val()), []);
</text><text x="60.00px" y="1120.00px" xml:space="preserve">            <tspan fill="#fe8019">else</tspan> <tspan fill="#fe8019">if</tspan> (prop.PropertyType == <tspan fill="#fe8019">typeof</tspan>(<tspan fill="#fabd2f">double</tspan>))
</text><text x="60.00px" y="1134.40px" xml:space="preserve">                prop.SetValue(clean, Convert.ToDouble(prop_val()), []);
</text><text x="60.00px" y="1148.80px" xml:space="preserve">            <tspan fill="#fe8019">else</tspan> <tspan fill="#fe8019">if</tspan> (prop.PropertyType == <tspan fill="#fe8019">typeof</tspan>(DateTime))
</text><text x="60.00px" y="1163.20px" xml:space="preserve">                prop.SetValue(clean, Convert.ToDateTime(prop_val()), []);
</text><text x="60.00px" y="1177.60px" xml:space="preserve">        }
</text><text x="60.00px" y="1192.00px" xml:space="preserve">        
</text><text x="60.00px" y="1206.40px" xml:space="preserve">        clean.OrderDate = DateTime.Now.ToString();
</text><text x="60.00px" y="1220.80px" xml:space="preserve">        clean.ExpectedDate = DateTime.Now.AddDays(<tspan fill="#fe8019">new</tspan> Random().Next(<tspan fill="#d3869b">6</tspan>, <tspan fill="#d3869b">8</tspan>)).ToString();
</text><text x="60.00px" y="1235.20px" xml:space="preserve">
</text><text x="60.00px" y="1249.60px" xml:space="preserve">        list.ForEach(x =&gt; LOG(<tspan fill="#b8bb26">$&quot;{x.Item1}, {x.Item2()}&quot;</tspan>));
</text><text x="60.00px" y="1264.00px" xml:space="preserve">        LOG(<tspan fill="#b8bb26">$&quot;{model}, MODEL&quot;</tspan>);
</text><text x="60.00px" y="1278.40px" xml:space="preserve">        LOG(<tspan fill="#b8bb26">$&quot;{clean}, CLEAN&quot;</tspan>);
</text><text x="60.00px" y="1292.80px" xml:space="preserve">
</text><text x="60.00px" y="1307.20px" xml:space="preserve">        <tspan fill="#fe8019">return</tspan> clean;
</text><text x="60.00px" y="1321.60px" xml:space="preserve">    }
</text><text x="60.00px" y="1336.00px" xml:space="preserve">}
</text>
</g>
</svg>
