<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.0//EN" "http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd">
<svg width="1202.86" height="2320.57" xmlns="http://www.w3.org/2000/svg">
<rect width="1102.86" height="2280.57" fill="#282828" x="40.00px" y="20.00px"/>
<g font-family="Jetbrains Mono NF" font-size="12.00px" fill="#ebdbb2" clip-path="url(#terminalMask)">
<text x="60.00px" y="54.40px" xml:space="preserve"><tspan fill="#fe8019">using</tspan> Microsoft.Data.SqlClient;
</text><text x="60.00px" y="68.80px" xml:space="preserve"><tspan fill="#fe8019">using</tspan> Model;
</text><text x="60.00px" y="83.20px" xml:space="preserve"><tspan fill="#fe8019">using</tspan> System.Configuration;
</text><text x="60.00px" y="97.60px" xml:space="preserve"><tspan fill="#fe8019">namespace</tspan> Database;
</text><text x="60.00px" y="112.00px" xml:space="preserve">
</text><text x="60.00px" y="126.40px" xml:space="preserve"><tspan fill="#928374" font-style="italic">/// &lt;summary&gt;</tspan>
</text><text x="60.00px" y="140.80px" xml:space="preserve"><tspan fill="#928374" font-style="italic">/// Database Access Layer</tspan>
</text><text x="60.00px" y="155.20px" xml:space="preserve"><tspan fill="#928374" font-style="italic">/// Manages all Database Operations, including Queries, Creating, Deleting, Updating</tspan>
</text><text x="60.00px" y="169.60px" xml:space="preserve"><tspan fill="#928374" font-style="italic">/// &lt;/summary&gt;</tspan>
</text><text x="60.00px" y="184.00px" xml:space="preserve"><tspan fill="#fe8019">public</tspan> <tspan fill="#fe8019">static</tspan> <tspan fill="#fe8019">class</tspan> DAL {
</text><text x="60.00px" y="198.40px" xml:space="preserve">    <tspan fill="#928374" font-style="italic">/// &lt;summary&gt;</tspan>
</text><text x="60.00px" y="212.80px" xml:space="preserve">    <tspan fill="#928374" font-style="italic">/// Connection String fomr App.config</tspan>
</text><text x="60.00px" y="227.20px" xml:space="preserve">    <tspan fill="#928374" font-style="italic">/// &lt;/summary&gt;</tspan>
</text><text x="60.00px" y="241.60px" xml:space="preserve">    <tspan fill="#fe8019">private</tspan> <tspan fill="#fe8019">static</tspan> <tspan fill="#fabd2f">string</tspan> _connectionString = <tspan fill="#fabd2f">string</tspan>.Format(
</text><text x="60.00px" y="256.00px" xml:space="preserve">        ConfigurationManager.
</text><text x="60.00px" y="270.40px" xml:space="preserve">        ConnectionStrings[<tspan fill="#b8bb26">&quot;DatabaseConnectionString&quot;</tspan>].
</text><text x="60.00px" y="284.80px" xml:space="preserve">        ConnectionString,
</text><text x="60.00px" y="299.20px" xml:space="preserve">        Directory.GetParent(AppDomain.CurrentDomain.BaseDirectory)!.Parent!.Parent!.Parent!.Parent!.FullName
</text><text x="60.00px" y="313.60px" xml:space="preserve">        );
</text><text x="60.00px" y="328.00px" xml:space="preserve">
</text><text x="60.00px" y="342.40px" xml:space="preserve">    <tspan fill="#928374" font-style="italic">/// &lt;summary&gt;</tspan>
</text><text x="60.00px" y="356.80px" xml:space="preserve">    <tspan fill="#928374" font-style="italic">/// Query a database via class (and with selected column names)</tspan>
</text><text x="60.00px" y="371.20px" xml:space="preserve">    <tspan fill="#928374" font-style="italic">/// &lt;/summary&gt;</tspan>
</text><text x="60.00px" y="385.60px" xml:space="preserve">    <tspan fill="#928374" font-style="italic">/// &lt;typeparam name=&quot;T&quot;&gt;&lt;/typeparam&gt;</tspan>
</text><text x="60.00px" y="400.00px" xml:space="preserve">    <tspan fill="#928374" font-style="italic">/// &lt;param name=&quot;names&quot;&gt;&lt;/param&gt;</tspan>
</text><text x="60.00px" y="414.40px" xml:space="preserve">    <tspan fill="#928374" font-style="italic">/// &lt;returns&gt;&lt;/returns&gt;</tspan>
</text><text x="60.00px" y="428.80px" xml:space="preserve">    <tspan fill="#fe8019">public</tspan> <tspan fill="#fe8019">static</tspan> List&lt;T&gt; Query&lt;T&gt;(<tspan fill="#fe8019">params</tspan> <tspan fill="#fabd2f">string</tspan>[] names) <tspan fill="#fe8019">where</tspan> T : IDatabaseModel {
</text><text x="60.00px" y="443.20px" xml:space="preserve">        <tspan fill="#fabd2f">var</tspan> type = <tspan fill="#fe8019">typeof</tspan>(T);
</text><text x="60.00px" y="457.60px" xml:space="preserve">
</text><text x="60.00px" y="472.00px" xml:space="preserve">        <tspan fill="#928374" font-style="italic">// If no column names are passed then grab all of them</tspan>
</text><text x="60.00px" y="486.40px" xml:space="preserve">        <tspan fill="#fe8019">if</tspan> (names <tspan fill="#fe8019">is</tspan> <tspan fill="#fe8019">null</tspan> || names.Length == <tspan fill="#d3869b">0</tspan>) {
</text><text x="60.00px" y="500.80px" xml:space="preserve">            names = type.GetProperties().Select(x =&gt; x.Name).ToArray();
</text><text x="60.00px" y="515.20px" xml:space="preserve">        }
</text><text x="60.00px" y="529.60px" xml:space="preserve">
</text><text x="60.00px" y="544.00px" xml:space="preserve">        <tspan fill="#fabd2f">string</tspan> name = names.Aggregate((x, y) =&gt; <tspan fill="#b8bb26">$&quot;{x}, {y}&quot;</tspan>);
</text><text x="60.00px" y="558.40px" xml:space="preserve">
</text><text x="60.00px" y="572.80px" xml:space="preserve">        <tspan fill="#fe8019">using</tspan> var conn = <tspan fill="#fe8019">new</tspan> SqlConnection(<tspan fill="#b8bb26">$&quot;{_connectionString}&quot;</tspan>);
</text><text x="60.00px" y="587.20px" xml:space="preserve">        conn.Open();
</text><text x="60.00px" y="601.60px" xml:space="preserve">        <tspan fill="#fe8019">using</tspan> var command = <tspan fill="#fe8019">new</tspan> SqlCommand(<tspan fill="#b8bb26">$&quot;select {name} from {type.Name} ;&quot;</tspan>, conn);
</text><text x="60.00px" y="616.00px" xml:space="preserve">
</text><text x="60.00px" y="630.40px" xml:space="preserve">        <tspan fill="#928374" font-style="italic">// Grab results from query</tspan>
</text><text x="60.00px" y="644.80px" xml:space="preserve">        <tspan fill="#fe8019">using</tspan> var reader = command.ExecuteReader();
</text><text x="60.00px" y="659.20px" xml:space="preserve">
</text><text x="60.00px" y="673.60px" xml:space="preserve">        List&lt;T&gt; results = [];
</text><text x="60.00px" y="688.00px" xml:space="preserve">
</text><text x="60.00px" y="702.40px" xml:space="preserve">        <tspan fill="#fe8019">while</tspan> (reader.Read()) {
</text><text x="60.00px" y="716.80px" xml:space="preserve">            <tspan fill="#928374" font-style="italic">// Create instance of the DatabaseModel</tspan>
</text><text x="60.00px" y="731.20px" xml:space="preserve">            T obj = Activator.CreateInstance&lt;T&gt;();
</text><text x="60.00px" y="745.60px" xml:space="preserve">            <tspan fill="#fe8019">foreach</tspan> (<tspan fill="#fabd2f">var</tspan> property <tspan fill="#fe8019">in</tspan> type.GetProperties().Where(x =&gt; names.Contains(x.Name))) {
</text><text x="60.00px" y="760.00px" xml:space="preserve">                <tspan fill="#928374" font-style="italic">// Grab the column cooresponding to the name</tspan>
</text><text x="60.00px" y="774.40px" xml:space="preserve">                <tspan fill="#fabd2f">var</tspan> ord = reader.GetOrdinal(property.Name);
</text><text x="60.00px" y="788.80px" xml:space="preserve">
</text><text x="60.00px" y="803.20px" xml:space="preserve">                <tspan fill="#928374" font-style="italic">// Database must not contain any nulls</tspan>
</text><text x="60.00px" y="817.60px" xml:space="preserve">                ASSERT(!reader.IsDBNull(ord));
</text><text x="60.00px" y="832.00px" xml:space="preserve">
</text><text x="60.00px" y="846.40px" xml:space="preserve">                <tspan fill="#fabd2f">var</tspan> t = property.PropertyType;
</text><text x="60.00px" y="860.80px" xml:space="preserve">
</text><text x="60.00px" y="875.20px" xml:space="preserve">                <tspan fill="#928374" font-style="italic">// Properly cast to type based on SQL type</tspan>
</text><text x="60.00px" y="889.60px" xml:space="preserve">                <tspan fill="#fe8019">switch</tspan> (property.PropertyType.Name) {
</text><text x="60.00px" y="904.00px" xml:space="preserve">                    <tspan fill="#fe8019">case</tspan> <tspan fill="#b8bb26">&quot;Int32&quot;</tspan>:
</text><text x="60.00px" y="918.40px" xml:space="preserve">                    <tspan fill="#fe8019">case</tspan> <tspan fill="#b8bb26">&quot;System.Int32&quot;</tspan>:
</text><text x="60.00px" y="932.80px" xml:space="preserve">                        <tspan fill="#fabd2f">var</tspan> num = reader.GetInt32(ord);
</text><text x="60.00px" y="947.20px" xml:space="preserve">                        <tspan fill="#fabd2f">var</tspan> prop = type.GetProperty(property.Name);
</text><text x="60.00px" y="961.60px" xml:space="preserve">                        <tspan fill="#fe8019">if</tspan> (prop <tspan fill="#fe8019">is</tspan> <tspan fill="#fe8019">null</tspan>)
</text><text x="60.00px" y="976.00px" xml:space="preserve">                            <tspan fill="#fe8019">break</tspan>;
</text><text x="60.00px" y="990.40px" xml:space="preserve">                        prop.SetValue(obj, num);
</text><text x="60.00px" y="1004.80px" xml:space="preserve">                        <tspan fill="#fe8019">break</tspan>;
</text><text x="60.00px" y="1019.20px" xml:space="preserve">                    <tspan fill="#fe8019">case</tspan> <tspan fill="#b8bb26">&quot;Double&quot;</tspan>:
</text><text x="60.00px" y="1033.60px" xml:space="preserve">                        <tspan fill="#fabd2f">var</tspan> doub = reader.GetInt32(ord);
</text><text x="60.00px" y="1048.00px" xml:space="preserve">                        <tspan fill="#fabd2f">var</tspan> p = type.GetProperty(property.Name);
</text><text x="60.00px" y="1062.40px" xml:space="preserve">                        <tspan fill="#fe8019">if</tspan> (p <tspan fill="#fe8019">is</tspan> <tspan fill="#fe8019">null</tspan>)
</text><text x="60.00px" y="1076.80px" xml:space="preserve">                            <tspan fill="#fe8019">break</tspan>;
</text><text x="60.00px" y="1091.20px" xml:space="preserve">                        p.SetValue(obj, doub);
</text><text x="60.00px" y="1105.60px" xml:space="preserve">                        <tspan fill="#fe8019">break</tspan>;
</text><text x="60.00px" y="1120.00px" xml:space="preserve">                    <tspan fill="#fe8019">case</tspan> <tspan fill="#b8bb26">&quot;DateTime&quot;</tspan>:
</text><text x="60.00px" y="1134.40px" xml:space="preserve">                        <tspan fill="#fabd2f">var</tspan> dt = reader.GetDateTime(ord);
</text><text x="60.00px" y="1148.80px" xml:space="preserve">                        type.GetProperty(property.Name)!.SetValue(obj, dt);
</text><text x="60.00px" y="1163.20px" xml:space="preserve">                        <tspan fill="#fe8019">break</tspan>;
</text><text x="60.00px" y="1177.60px" xml:space="preserve">                    <tspan fill="#fe8019">case</tspan> <tspan fill="#b8bb26">&quot;Boolean&quot;</tspan>:
</text><text x="60.00px" y="1192.00px" xml:space="preserve">                        <tspan fill="#fabd2f">var</tspan> b = reader.GetBoolean(ord);
</text><text x="60.00px" y="1206.40px" xml:space="preserve">                        type.GetProperty(property.Name)!.SetValue(obj, b);
</text><text x="60.00px" y="1220.80px" xml:space="preserve">                        <tspan fill="#fe8019">break</tspan>;
</text><text x="60.00px" y="1235.20px" xml:space="preserve">                    <tspan fill="#fe8019">default</tspan>:
</text><text x="60.00px" y="1249.60px" xml:space="preserve">                        <tspan fill="#fabd2f">var</tspan> str = reader.GetString(ord);
</text><text x="60.00px" y="1264.00px" xml:space="preserve">                        type.GetProperty(property.Name)!.SetValue(obj, str);
</text><text x="60.00px" y="1278.40px" xml:space="preserve">                        <tspan fill="#fe8019">break</tspan>;
</text><text x="60.00px" y="1292.80px" xml:space="preserve">                };
</text><text x="60.00px" y="1307.20px" xml:space="preserve">            }
</text><text x="60.00px" y="1321.60px" xml:space="preserve">            results.Add(obj);
</text><text x="60.00px" y="1336.00px" xml:space="preserve">        }
</text><text x="60.00px" y="1350.40px" xml:space="preserve">
</text><text x="60.00px" y="1364.80px" xml:space="preserve">        conn.Close();
</text><text x="60.00px" y="1379.20px" xml:space="preserve">
</text><text x="60.00px" y="1393.60px" xml:space="preserve">        <tspan fill="#fe8019">return</tspan> results;
</text><text x="60.00px" y="1408.00px" xml:space="preserve">    }
</text><text x="60.00px" y="1422.40px" xml:space="preserve">
</text><text x="60.00px" y="1436.80px" xml:space="preserve">    <tspan fill="#928374" font-style="italic">// public static List&lt;T&gt; Query&lt;T&gt;(Func&lt;T, bool&gt; func, params string[] names) where T : DatabaseModel =&gt; Query&lt;T&gt;(names).Where(func).ToList();</tspan>
</text><text x="60.00px" y="1451.20px" xml:space="preserve">
</text><text x="60.00px" y="1465.60px" xml:space="preserve">    <tspan fill="#928374" font-style="italic">/// &lt;summary&gt;</tspan>
</text><text x="60.00px" y="1480.00px" xml:space="preserve">    <tspan fill="#928374" font-style="italic">/// Update SQL statement</tspan>
</text><text x="60.00px" y="1494.40px" xml:space="preserve">    <tspan fill="#928374" font-style="italic">/// &lt;/summary&gt;</tspan>
</text><text x="60.00px" y="1508.80px" xml:space="preserve">    <tspan fill="#928374" font-style="italic">/// &lt;typeparam name=&quot;T&quot;&gt;The type of DatabaseModel to update&lt;/typeparam&gt;</tspan>
</text><text x="60.00px" y="1523.20px" xml:space="preserve">    <tspan fill="#928374" font-style="italic">/// &lt;param name=&quot;obj&quot;&gt;The instance of DatabaseModel to update&lt;/param&gt;</tspan>
</text><text x="60.00px" y="1537.60px" xml:space="preserve">    <tspan fill="#928374" font-style="italic">/// &lt;returns&gt;&lt;/returns&gt;</tspan>
</text><text x="60.00px" y="1552.00px" xml:space="preserve">    <tspan fill="#fe8019">public</tspan> <tspan fill="#fe8019">static</tspan> <tspan fill="#fabd2f">bool</tspan> Update&lt;T&gt;(<tspan fill="#fe8019">this</tspan> T obj) <tspan fill="#fe8019">where</tspan> T : IDatabaseModel {
</text><text x="60.00px" y="1566.40px" xml:space="preserve">        <tspan fill="#fabd2f">var</tspan> type = <tspan fill="#fe8019">typeof</tspan>(T);
</text><text x="60.00px" y="1580.80px" xml:space="preserve">
</text><text x="60.00px" y="1595.20px" xml:space="preserve">        <tspan fill="#fe8019">using</tspan> var conn = <tspan fill="#fe8019">new</tspan> SqlConnection(<tspan fill="#b8bb26">$&quot;{_connectionString}&quot;</tspan>);
</text><text x="60.00px" y="1609.60px" xml:space="preserve">        conn.Open();
</text><text x="60.00px" y="1624.00px" xml:space="preserve">
</text><text x="60.00px" y="1638.40px" xml:space="preserve">        <tspan fill="#fabd2f">string</tspan> updates = type.GetProperties().Select(x =&gt; x.Name)
</text><text x="60.00px" y="1652.80px" xml:space="preserve">            .Zip(type.GetProperties()
</text><text x="60.00px" y="1667.20px" xml:space="preserve">                .Select(x =&gt; x.GetValue(obj))
</text><text x="60.00px" y="1681.60px" xml:space="preserve">                .Select(y =&gt; y == <tspan fill="#fe8019">null</tspan> ? <tspan fill="#b8bb26">&quot;&quot;</tspan> : y.ToString()))
</text><text x="60.00px" y="1696.00px" xml:space="preserve">            .Select((c, _) =&gt; <tspan fill="#b8bb26">$&quot;{c.First} = &apos;{c.Second}&apos;&quot;</tspan>)
</text><text x="60.00px" y="1710.40px" xml:space="preserve">            .Aggregate((x, y) =&gt; <tspan fill="#b8bb26">$&quot;{x}, {y}&quot;</tspan>);
</text><text x="60.00px" y="1724.80px" xml:space="preserve">
</text><text x="60.00px" y="1739.20px" xml:space="preserve">        <tspan fill="#fe8019">using</tspan> var command = <tspan fill="#fe8019">new</tspan> SqlCommand(<tspan fill="#b8bb26">$&quot;update {type.Name} set {updates} where {obj.FormatKeys()};&quot;</tspan>, conn);
</text><text x="60.00px" y="1753.60px" xml:space="preserve">        <tspan fill="#fabd2f">int</tspan> res = command.ExecuteNonQuery();
</text><text x="60.00px" y="1768.00px" xml:space="preserve">
</text><text x="60.00px" y="1782.40px" xml:space="preserve">        conn.Close();
</text><text x="60.00px" y="1796.80px" xml:space="preserve">
</text><text x="60.00px" y="1811.20px" xml:space="preserve">        <tspan fill="#fe8019">return</tspan> res == <tspan fill="#d3869b">0</tspan>;
</text><text x="60.00px" y="1825.60px" xml:space="preserve">    }
</text><text x="60.00px" y="1840.00px" xml:space="preserve">
</text><text x="60.00px" y="1854.40px" xml:space="preserve">    <tspan fill="#fe8019">public</tspan> <tspan fill="#fe8019">static</tspan> <tspan fill="#fabd2f">bool</tspan> Delete&lt;T&gt;(<tspan fill="#fe8019">this</tspan> T obj) <tspan fill="#fe8019">where</tspan> T : IDatabaseModel {
</text><text x="60.00px" y="1868.80px" xml:space="preserve">        <tspan fill="#fabd2f">var</tspan> type = <tspan fill="#fe8019">typeof</tspan>(T);
</text><text x="60.00px" y="1883.20px" xml:space="preserve">
</text><text x="60.00px" y="1897.60px" xml:space="preserve">        <tspan fill="#fe8019">using</tspan> var conn = <tspan fill="#fe8019">new</tspan> SqlConnection(<tspan fill="#b8bb26">$&quot;{_connectionString}&quot;</tspan>);
</text><text x="60.00px" y="1912.00px" xml:space="preserve">        conn.Open();
</text><text x="60.00px" y="1926.40px" xml:space="preserve">
</text><text x="60.00px" y="1940.80px" xml:space="preserve">        <tspan fill="#fe8019">using</tspan> var command = <tspan fill="#fe8019">new</tspan> SqlCommand(<tspan fill="#b8bb26">$&quot;delete from {type.Name} where {obj.FormatKeys()};&quot;</tspan>, conn);
</text><text x="60.00px" y="1955.20px" xml:space="preserve">        <tspan fill="#fe8019">return</tspan> command.ExecuteNonQuery() == <tspan fill="#d3869b">0</tspan>;
</text><text x="60.00px" y="1969.60px" xml:space="preserve">    }
</text><text x="60.00px" y="1984.00px" xml:space="preserve">
</text><text x="60.00px" y="1998.40px" xml:space="preserve">    <tspan fill="#fe8019">public</tspan> <tspan fill="#fe8019">static</tspan> <tspan fill="#fabd2f">bool</tspan> Create&lt;T&gt;(<tspan fill="#fe8019">this</tspan> T obj) <tspan fill="#fe8019">where</tspan> T : IDatabaseModel {
</text><text x="60.00px" y="2012.80px" xml:space="preserve">        <tspan fill="#fabd2f">var</tspan> type = <tspan fill="#fe8019">typeof</tspan>(T);
</text><text x="60.00px" y="2027.20px" xml:space="preserve">        <tspan fill="#fe8019">using</tspan> var conn = <tspan fill="#fe8019">new</tspan> SqlConnection(<tspan fill="#b8bb26">$&quot;{_connectionString}&quot;</tspan>);
</text><text x="60.00px" y="2041.60px" xml:space="preserve">        conn.Open();
</text><text x="60.00px" y="2056.00px" xml:space="preserve">
</text><text x="60.00px" y="2070.40px" xml:space="preserve">        <tspan fill="#fabd2f">var</tspan> props = type.GetProperties();
</text><text x="60.00px" y="2084.80px" xml:space="preserve">        <tspan fill="#fabd2f">var</tspan> names = props.Select(x =&gt; x.Name);
</text><text x="60.00px" y="2099.20px" xml:space="preserve">        <tspan fill="#fabd2f">var</tspan> aggr = names.Aggregate((x, y) =&gt; <tspan fill="#b8bb26">$&quot;{x}, {y}&quot;</tspan>);
</text><text x="60.00px" y="2113.60px" xml:space="preserve">        <tspan fill="#fabd2f">string</tspan> vals = type.GetProperties().
</text><text x="60.00px" y="2128.00px" xml:space="preserve">            Select(x =&gt; x.GetValue(obj)).
</text><text x="60.00px" y="2142.40px" xml:space="preserve">            Select(x =&gt; x!.ToString()).
</text><text x="60.00px" y="2156.80px" xml:space="preserve">            Select(x =&gt; x!.Replace(<tspan fill="#b8bb26">&quot;&apos;&quot;</tspan>, <tspan fill="#b8bb26">&quot;&apos;&apos;&quot;</tspan>)).
</text><text x="60.00px" y="2171.20px" xml:space="preserve">            Aggregate((x, y) =&gt; <tspan fill="#b8bb26">$&quot;{x}, &apos;{y}&apos;&quot;</tspan>)!;
</text><text x="60.00px" y="2185.60px" xml:space="preserve">
</text><text x="60.00px" y="2200.00px" xml:space="preserve">        <tspan fill="#fe8019">using</tspan> var command = <tspan fill="#fe8019">new</tspan> SqlCommand(<tspan fill="#b8bb26">$&quot;insert into {type.Name} ({aggr}) values ({vals})&quot;</tspan>, conn);
</text><text x="60.00px" y="2214.40px" xml:space="preserve">
</text><text x="60.00px" y="2228.80px" xml:space="preserve">        <tspan fill="#fe8019">return</tspan> command.ExecuteNonQuery() == <tspan fill="#d3869b">0</tspan>;
</text><text x="60.00px" y="2243.20px" xml:space="preserve">    }
</text><text x="60.00px" y="2257.60px" xml:space="preserve">}
</text>
</g>
</svg>
