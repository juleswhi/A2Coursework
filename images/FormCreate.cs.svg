<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.0//EN" "http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd">
<svg width="1238.57" height="4106.00" xmlns="http://www.w3.org/2000/svg">
<rect width="1138.57" height="4066.00" fill="#282828" x="40.00px" y="20.00px"/>
<g font-family="Jetbrains Mono" font-size="12.00px" fill="#ebdbb2" clip-path="url(#terminalMask)">
<text x="60.00px" y="54.40px" xml:space="preserve">﻿<tspan fill="#fe8019">using</tspan> MaterialSkin.Controls;
</text><text x="60.00px" y="68.80px" xml:space="preserve"><tspan fill="#fe8019">using</tspan> Model;
</text><text x="60.00px" y="83.20px" xml:space="preserve"><tspan fill="#fe8019">using</tspan> System.Reflection;
</text><text x="60.00px" y="97.60px" xml:space="preserve">
</text><text x="60.00px" y="112.00px" xml:space="preserve"><tspan fill="#fe8019">namespace</tspan> View;
</text><text x="60.00px" y="126.40px" xml:space="preserve">
</text><text x="60.00px" y="140.80px" xml:space="preserve"><tspan fill="#fe8019">public</tspan> <tspan fill="#fe8019">partial</tspan> <tspan fill="#fe8019">class</tspan> FormCreate : Form, GenericCreateableForm {
</text><text x="60.00px" y="155.20px" xml:space="preserve">    <tspan fill="#fe8019">public</tspan> <tspan fill="#fe8019">static</tspan> Type? PreviousFormType { <tspan fill="#fe8019">get</tspan>; <tspan fill="#fe8019">private</tspan> <tspan fill="#fe8019">set</tspan>; } = <tspan fill="#fe8019">null</tspan>;
</text><text x="60.00px" y="169.60px" xml:space="preserve">    <tspan fill="#fe8019">public</tspan> Action&lt;<tspan fill="#fabd2f">int</tspan>&gt;? AssignForeignKey;
</text><text x="60.00px" y="184.00px" xml:space="preserve">    <tspan fill="#fe8019">public</tspan> Func&lt;IEnumerable&lt;(<tspan fill="#fabd2f">string</tspan>, <tspan fill="#fabd2f">object</tspan>)&gt;&gt;? func = <tspan fill="#fe8019">null</tspan>;
</text><text x="60.00px" y="198.40px" xml:space="preserve">    <tspan fill="#fe8019">public</tspan> List&lt;PropValue&gt; PropertyValues = [];
</text><text x="60.00px" y="212.80px" xml:space="preserve">
</text><text x="60.00px" y="227.20px" xml:space="preserve">    <tspan fill="#fe8019">private</tspan> Type? _currentType;
</text><text x="60.00px" y="241.60px" xml:space="preserve">    <tspan fill="#fe8019">private</tspan> List&lt;MaterialTextBox&gt; _textBoxes =&gt; panel1.Controls.OfType&lt;MaterialTextBox&gt;().ToList();
</text><text x="60.00px" y="256.00px" xml:space="preserve">    <tspan fill="#fe8019">private</tspan> IDatabaseModel? _edited_object;
</text><text x="60.00px" y="270.40px" xml:space="preserve">
</text><text x="60.00px" y="284.80px" xml:space="preserve">    <tspan fill="#fe8019">private</tspan> <tspan fill="#fe8019">static</tspan> Dictionary&lt;Type, PropertyInfo[]&gt; _propCache = <tspan fill="#fe8019">new</tspan>();
</text><text x="60.00px" y="299.20px" xml:space="preserve">
</text><text x="60.00px" y="313.60px" xml:space="preserve">    <tspan fill="#fe8019">public</tspan> FormCreate() {
</text><text x="60.00px" y="328.00px" xml:space="preserve">        InitializeComponent();
</text><text x="60.00px" y="342.40px" xml:space="preserve">    }
</text><text x="60.00px" y="356.80px" xml:space="preserve">
</text><text x="60.00px" y="371.20px" xml:space="preserve">    <tspan fill="#fe8019">private</tspan> List&lt;Type&gt; _skips = [<tspan fill="#fe8019">typeof</tspan>(PrimaryKey), <tspan fill="#fe8019">typeof</tspan>(InitialValueInt), <tspan fill="#fe8019">typeof</tspan>(InitialValueString), <tspan fill="#fe8019">typeof</tspan>(InitialValueDate)];
</text><text x="60.00px" y="385.60px" xml:space="preserve">
</text><text x="60.00px" y="400.00px" xml:space="preserve">    <tspan fill="#fe8019">public</tspan> <tspan fill="#fe8019">class</tspan> PropValue {
</text><text x="60.00px" y="414.40px" xml:space="preserve">        <tspan fill="#fe8019">public</tspan> PropValue(<tspan fill="#fabd2f">string</tspan> name, Func&lt;<tspan fill="#fabd2f">string</tspan>&gt; <tspan fill="#fe8019">value</tspan>, Control control, Type? type, Action&lt;<tspan fill="#fabd2f">int</tspan>&gt;? AssignForeignKey) {
</text><text x="60.00px" y="428.80px" xml:space="preserve">            Name = name;
</text><text x="60.00px" y="443.20px" xml:space="preserve">            Value = <tspan fill="#fe8019">value</tspan>;
</text><text x="60.00px" y="457.60px" xml:space="preserve">            Control = control;
</text><text x="60.00px" y="472.00px" xml:space="preserve">            Type = type;
</text><text x="60.00px" y="486.40px" xml:space="preserve">        }
</text><text x="60.00px" y="500.80px" xml:space="preserve">
</text><text x="60.00px" y="515.20px" xml:space="preserve">        <tspan fill="#fe8019">public</tspan> <tspan fill="#fabd2f">string</tspan> Name { <tspan fill="#fe8019">get</tspan>; <tspan fill="#fe8019">set</tspan>; }
</text><text x="60.00px" y="529.60px" xml:space="preserve">        <tspan fill="#fe8019">public</tspan> Func&lt;<tspan fill="#fabd2f">string</tspan>&gt; Value { <tspan fill="#fe8019">get</tspan>; <tspan fill="#fe8019">set</tspan>; }
</text><text x="60.00px" y="544.00px" xml:space="preserve">        <tspan fill="#fe8019">public</tspan> Control Control { <tspan fill="#fe8019">get</tspan>; <tspan fill="#fe8019">set</tspan>; }
</text><text x="60.00px" y="558.40px" xml:space="preserve">        <tspan fill="#fe8019">public</tspan> Type? Type { <tspan fill="#fe8019">get</tspan>; <tspan fill="#fe8019">set</tspan>; }
</text><text x="60.00px" y="572.80px" xml:space="preserve">        Action&lt;<tspan fill="#fabd2f">int</tspan>&gt;? AssignForeignKey { <tspan fill="#fe8019">get</tspan>; <tspan fill="#fe8019">set</tspan>; }
</text><text x="60.00px" y="587.20px" xml:space="preserve">    }
</text><text x="60.00px" y="601.60px" xml:space="preserve">
</text><text x="60.00px" y="616.00px" xml:space="preserve">    <tspan fill="#fe8019">public</tspan> <tspan fill="#fe8019">void</tspan> Create&lt;T&gt;() <tspan fill="#fe8019">where</tspan> T : IDatabaseModel {
</text><text x="60.00px" y="630.40px" xml:space="preserve">        _currentType = <tspan fill="#fe8019">typeof</tspan>(T);
</text><text x="60.00px" y="644.80px" xml:space="preserve">        PreviousFormType = _currentType;
</text><text x="60.00px" y="659.20px" xml:space="preserve">
</text><text x="60.00px" y="673.60px" xml:space="preserve">        <tspan fill="#928374" font-style="italic">// Store properties in cache if needed later</tspan>
</text><text x="60.00px" y="688.00px" xml:space="preserve">        PropertyInfo[] props;
</text><text x="60.00px" y="702.40px" xml:space="preserve">        <tspan fill="#fe8019">if</tspan> (_propCache.ContainsKey(_currentType)) {
</text><text x="60.00px" y="716.80px" xml:space="preserve">            props = _propCache[_currentType];
</text><text x="60.00px" y="731.20px" xml:space="preserve">        } <tspan fill="#fe8019">else</tspan> {
</text><text x="60.00px" y="745.60px" xml:space="preserve">            props = _currentType.GetProperties();
</text><text x="60.00px" y="760.00px" xml:space="preserve">            _propCache[_currentType] = props;
</text><text x="60.00px" y="774.40px" xml:space="preserve">        }
</text><text x="60.00px" y="788.80px" xml:space="preserve">
</text><text x="60.00px" y="803.20px" xml:space="preserve">        <tspan fill="#fabd2f">var</tspan> valid_props = props.Where(x =&gt; !x.CustomAttributes.Any(x =&gt; _skips.Contains(x.AttributeType))).Select(x =&gt; (x, <tspan fill="#fe8019">false</tspan>)).ToList();
</text><text x="60.00px" y="817.60px" xml:space="preserve">
</text><text x="60.00px" y="832.00px" xml:space="preserve">
</text><text x="60.00px" y="846.40px" xml:space="preserve">
</text><text x="60.00px" y="860.80px" xml:space="preserve">        <tspan fill="#fe8019">foreach</tspan> (<tspan fill="#fabd2f">var</tspan> prop <tspan fill="#fe8019">in</tspan> valid_props) {
</text><text x="60.00px" y="875.20px" xml:space="preserve">            <tspan fill="#fabd2f">var</tspan> label = <tspan fill="#fe8019">new</tspan> MaterialLabel() { Text = prop.Item1.Name };
</text><text x="60.00px" y="889.60px" xml:space="preserve">            panel1.Controls.Add(label);
</text><text x="60.00px" y="904.00px" xml:space="preserve">            <tspan fill="#fabd2f">var</tspan> txtBox = <tspan fill="#fe8019">new</tspan> MaterialTextBox();
</text><text x="60.00px" y="918.40px" xml:space="preserve">
</text><text x="60.00px" y="932.80px" xml:space="preserve">            Type? t = <tspan fill="#fe8019">null</tspan>;
</text><text x="60.00px" y="947.20px" xml:space="preserve">
</text><text x="60.00px" y="961.60px" xml:space="preserve">            <tspan fill="#fe8019">if</tspan> (Attribute.GetCustomAttribute(prop.Item1, <tspan fill="#fe8019">typeof</tspan>(PrimaryKey)) != <tspan fill="#fe8019">null</tspan> ||
</text><text x="60.00px" y="976.00px" xml:space="preserve">                Attribute.GetCustomAttribute(prop.Item1, <tspan fill="#fe8019">typeof</tspan>(InitialValueInt)) != <tspan fill="#fe8019">null</tspan> ||
</text><text x="60.00px" y="990.40px" xml:space="preserve">                Attribute.GetCustomAttribute(prop.Item1, <tspan fill="#fe8019">typeof</tspan>(InitialValueString)) != <tspan fill="#fe8019">null</tspan>) {
</text><text x="60.00px" y="1004.80px" xml:space="preserve">                <tspan fill="#fe8019">continue</tspan>;
</text><text x="60.00px" y="1019.20px" xml:space="preserve">            }
</text><text x="60.00px" y="1033.60px" xml:space="preserve">            <tspan fill="#fe8019">if</tspan> (Attribute.GetCustomAttribute(prop.Item1, <tspan fill="#fe8019">typeof</tspan>(ForeignKeyAttribute)) != <tspan fill="#fe8019">null</tspan>) {
</text><text x="60.00px" y="1048.00px" xml:space="preserve">                <tspan fill="#fabd2f">var</tspan> n = prop.Item1.Name.Split(<tspan fill="#b8bb26">&quot;Id&quot;</tspan>)[<tspan fill="#d3869b">0</tspan>];
</text><text x="60.00px" y="1062.40px" xml:space="preserve">                <tspan fill="#fabd2f">var</tspan> type = ModelHelper.ModelTypes.First(x =&gt; x.Name == n);
</text><text x="60.00px" y="1076.80px" xml:space="preserve">                t = type;
</text><text x="60.00px" y="1091.20px" xml:space="preserve">                txtBox.Tag = <tspan fill="#b8bb26">&quot;foreign&quot;</tspan>;
</text><text x="60.00px" y="1105.60px" xml:space="preserve">            }
</text><text x="60.00px" y="1120.00px" xml:space="preserve">            <tspan fill="#fe8019">if</tspan> (Attribute.GetCustomAttribute(prop.Item1, <tspan fill="#fe8019">typeof</tspan>(DateAttribute)) != <tspan fill="#fe8019">null</tspan>) {
</text><text x="60.00px" y="1134.40px" xml:space="preserve">                txtBox.Tag = <tspan fill="#b8bb26">&quot;date&quot;</tspan>;
</text><text x="60.00px" y="1148.80px" xml:space="preserve">            }
</text><text x="60.00px" y="1163.20px" xml:space="preserve">            <tspan fill="#fe8019">if</tspan> (Attribute.GetCustomAttribute(prop.Item1, <tspan fill="#fe8019">typeof</tspan>(ToggleAttribute)) != <tspan fill="#fe8019">null</tspan>) {
</text><text x="60.00px" y="1177.60px" xml:space="preserve">                txtBox.Tag = <tspan fill="#b8bb26">&quot;toggle&quot;</tspan>;
</text><text x="60.00px" y="1192.00px" xml:space="preserve">            }
</text><text x="60.00px" y="1206.40px" xml:space="preserve">
</text><text x="60.00px" y="1220.80px" xml:space="preserve">            panel1.Controls.Add(txtBox);
</text><text x="60.00px" y="1235.20px" xml:space="preserve">            PropertyValues.Add(<tspan fill="#fe8019">new</tspan>(label.Text, () =&gt; txtBox.Text, txtBox, t, <tspan fill="#fe8019">null</tspan>));
</text><text x="60.00px" y="1249.60px" xml:space="preserve">        }
</text><text x="60.00px" y="1264.00px" xml:space="preserve">
</text><text x="60.00px" y="1278.40px" xml:space="preserve">        <tspan fill="#fabd2f">var</tspan> textBoxes = panel1.Controls.OfType&lt;MaterialTextBox&gt;().ToList();
</text><text x="60.00px" y="1292.80px" xml:space="preserve">
</text><text x="60.00px" y="1307.20px" xml:space="preserve">        <tspan fill="#fabd2f">var</tspan> textBoxCount = textBoxes.Count();
</text><text x="60.00px" y="1321.60px" xml:space="preserve">        <tspan fill="#fabd2f">var</tspan> maxLabelSize = props.
</text><text x="60.00px" y="1336.00px" xml:space="preserve">            Select(x =&gt; TextRenderer.MeasureText(x.Name, MaterialButton.DefaultFont)).
</text><text x="60.00px" y="1350.40px" xml:space="preserve">            OrderBy(s =&gt; s.Width).
</text><text x="60.00px" y="1364.80px" xml:space="preserve">            Reverse().
</text><text x="60.00px" y="1379.20px" xml:space="preserve">            First();
</text><text x="60.00px" y="1393.60px" xml:space="preserve">        <tspan fill="#fabd2f">var</tspan> maxTextBoxSize = <tspan fill="#fe8019">new</tspan> Size(<tspan fill="#d3869b">150</tspan>, <tspan fill="#d3869b">50</tspan>);
</text><text x="60.00px" y="1408.00px" xml:space="preserve">        <tspan fill="#fabd2f">var</tspan> horizontalSpace = panel1.Width;
</text><text x="60.00px" y="1422.40px" xml:space="preserve">        <tspan fill="#fabd2f">var</tspan> verticalSpace = panel1.Height;
</text><text x="60.00px" y="1436.80px" xml:space="preserve">
</text><text x="60.00px" y="1451.20px" xml:space="preserve">        <tspan fill="#fabd2f">var</tspan> labels = panel1.Controls.OfType&lt;MaterialLabel&gt;().ToList();
</text><text x="60.00px" y="1465.60px" xml:space="preserve">
</text><text x="60.00px" y="1480.00px" xml:space="preserve">        <tspan fill="#8ec07c">#region</tspan> Random Sizing Stuff
</text><text x="60.00px" y="1494.40px" xml:space="preserve">
</text><text x="60.00px" y="1508.80px" xml:space="preserve">        <tspan fill="#fabd2f">int</tspan> columns = (<tspan fill="#fabd2f">int</tspan>)Math.Ceiling(Math.Sqrt(textBoxCount));
</text><text x="60.00px" y="1523.20px" xml:space="preserve">        <tspan fill="#fabd2f">int</tspan> rows = (<tspan fill="#fabd2f">int</tspan>)Math.Ceiling((<tspan fill="#fabd2f">double</tspan>)textBoxCount / columns);
</text><text x="60.00px" y="1537.60px" xml:space="preserve">
</text><text x="60.00px" y="1552.00px" xml:space="preserve">        <tspan fill="#fabd2f">int</tspan> totalHeightPerRow = maxLabelSize.Height + maxTextBoxSize.Height + <tspan fill="#d3869b">10</tspan>;
</text><text x="60.00px" y="1566.40px" xml:space="preserve">
</text><text x="60.00px" y="1580.80px" xml:space="preserve">        <tspan fill="#fabd2f">int</tspan> availableWidthPerColumn = horizontalSpace / columns;
</text><text x="60.00px" y="1595.20px" xml:space="preserve">        <tspan fill="#fabd2f">int</tspan> availableHeightPerRow = verticalSpace / rows;
</text><text x="60.00px" y="1609.60px" xml:space="preserve">
</text><text x="60.00px" y="1624.00px" xml:space="preserve">        <tspan fill="#fabd2f">int</tspan> textBoxWidth = Math.Min(maxTextBoxSize.Width, availableWidthPerColumn);
</text><text x="60.00px" y="1638.40px" xml:space="preserve">        <tspan fill="#fabd2f">int</tspan> textBoxHeight = Math.Min(maxTextBoxSize.Height, availableHeightPerRow - maxLabelSize.Height - <tspan fill="#d3869b">10</tspan>); <tspan fill="#928374" font-style="italic">// Account for label height and spacing</tspan>
</text><text x="60.00px" y="1652.80px" xml:space="preserve">        <tspan fill="#fabd2f">int</tspan> labelWidth = Math.Min(maxLabelSize.Width, availableWidthPerColumn);
</text><text x="60.00px" y="1667.20px" xml:space="preserve">        <tspan fill="#fabd2f">int</tspan> labelHeight = maxLabelSize.Height;
</text><text x="60.00px" y="1681.60px" xml:space="preserve">
</text><text x="60.00px" y="1696.00px" xml:space="preserve">        <tspan fill="#fabd2f">int</tspan> horizontalSpacing = (horizontalSpace - (textBoxWidth * columns)) / (columns + <tspan fill="#d3869b">1</tspan>);
</text><text x="60.00px" y="1710.40px" xml:space="preserve">        <tspan fill="#fabd2f">int</tspan> verticalSpacing = (verticalSpace - (totalHeightPerRow * rows)) / (rows + <tspan fill="#d3869b">1</tspan>);
</text><text x="60.00px" y="1724.80px" xml:space="preserve">
</text><text x="60.00px" y="1739.20px" xml:space="preserve">        <tspan fill="#fabd2f">int</tspan> startX = <tspan fill="#d3869b">10</tspan>;
</text><text x="60.00px" y="1753.60px" xml:space="preserve">        <tspan fill="#fabd2f">int</tspan> startY = <tspan fill="#d3869b">10</tspan>;
</text><text x="60.00px" y="1768.00px" xml:space="preserve">
</text><text x="60.00px" y="1782.40px" xml:space="preserve">        <tspan fill="#fe8019">for</tspan> (<tspan fill="#fabd2f">int</tspan> i = <tspan fill="#d3869b">0</tspan>; i &lt; textBoxCount; i++) {
</text><text x="60.00px" y="1796.80px" xml:space="preserve">            <tspan fill="#fabd2f">int</tspan> row = i / columns;
</text><text x="60.00px" y="1811.20px" xml:space="preserve">            <tspan fill="#fabd2f">int</tspan> col = i % columns;
</text><text x="60.00px" y="1825.60px" xml:space="preserve">
</text><text x="60.00px" y="1840.00px" xml:space="preserve">            <tspan fill="#fabd2f">int</tspan> labelX = startX + horizontalSpacing + col * (textBoxWidth + horizontalSpacing);
</text><text x="60.00px" y="1854.40px" xml:space="preserve">            <tspan fill="#fabd2f">int</tspan> labelY = startY + verticalSpacing + row * (totalHeightPerRow + verticalSpacing);
</text><text x="60.00px" y="1868.80px" xml:space="preserve">
</text><text x="60.00px" y="1883.20px" xml:space="preserve">            <tspan fill="#fabd2f">int</tspan> textBoxX = labelX;
</text><text x="60.00px" y="1897.60px" xml:space="preserve">            <tspan fill="#fabd2f">int</tspan> textBoxY = labelY + labelHeight + <tspan fill="#d3869b">10</tspan>;
</text><text x="60.00px" y="1912.00px" xml:space="preserve">
</text><text x="60.00px" y="1926.40px" xml:space="preserve">            labels[i].Location = <tspan fill="#fe8019">new</tspan> Point(labelX, labelY);
</text><text x="60.00px" y="1940.80px" xml:space="preserve">            labels[i].Size = <tspan fill="#fe8019">new</tspan> Size(labelWidth, labelHeight);
</text><text x="60.00px" y="1955.20px" xml:space="preserve">
</text><text x="60.00px" y="1969.60px" xml:space="preserve">            textBoxes[i].Location = <tspan fill="#fe8019">new</tspan> Point(textBoxX, textBoxY);
</text><text x="60.00px" y="1984.00px" xml:space="preserve">            textBoxes[i].Size = <tspan fill="#fe8019">new</tspan> Size(textBoxWidth, textBoxHeight);
</text><text x="60.00px" y="1998.40px" xml:space="preserve">        }
</text><text x="60.00px" y="2012.80px" xml:space="preserve">
</text><text x="60.00px" y="2027.20px" xml:space="preserve">        <tspan fill="#8ec07c">#endregion</tspan>
</text><text x="60.00px" y="2041.60px" xml:space="preserve">
</text><text x="60.00px" y="2056.00px" xml:space="preserve">        <tspan fill="#8ec07c">#region</tspan> Custom Buttons Creation and Spacing
</text><text x="60.00px" y="2070.40px" xml:space="preserve">
</text><text x="60.00px" y="2084.80px" xml:space="preserve">        <tspan fill="#fabd2f">var</tspan> obj = (IDatabaseModel)Activator.CreateInstance(<tspan fill="#fe8019">typeof</tspan>(T))!;
</text><text x="60.00px" y="2099.20px" xml:space="preserve">        <tspan fill="#fabd2f">var</tspan> btns = obj.CreateButtons();
</text><text x="60.00px" y="2113.60px" xml:space="preserve">
</text><text x="60.00px" y="2128.00px" xml:space="preserve">        <tspan fill="#fe8019">foreach</tspan> (<tspan fill="#fabd2f">var</tspan> btn <tspan fill="#fe8019">in</tspan> btns) {
</text><text x="60.00px" y="2142.40px" xml:space="preserve">            <tspan fill="#fabd2f">var</tspan> b = <tspan fill="#fe8019">new</tspan> MaterialButton() { Text = btn.Key, UseAccentColor = <tspan fill="#fe8019">true</tspan> };
</text><text x="60.00px" y="2156.80px" xml:space="preserve">
</text><text x="60.00px" y="2171.20px" xml:space="preserve">            b.Click += (s, e) =&gt; btn.Value.Item1.Invoke((PropertyValues.Select(x =&gt; (x.Name, x.Value)).ToList(), _edited_object));
</text><text x="60.00px" y="2185.60px" xml:space="preserve">
</text><text x="60.00px" y="2200.00px" xml:space="preserve">            Controls.Add(b);
</text><text x="60.00px" y="2214.40px" xml:space="preserve">        }
</text><text x="60.00px" y="2228.80px" xml:space="preserve">
</text><text x="60.00px" y="2243.20px" xml:space="preserve">        <tspan fill="#fabd2f">var</tspan> buttons = Controls.OfType&lt;MaterialButton&gt;().ToList();
</text><text x="60.00px" y="2257.60px" xml:space="preserve">
</text><text x="60.00px" y="2272.00px" xml:space="preserve">        <tspan fill="#fabd2f">int</tspan> totalButtonsWidth = <tspan fill="#d3869b">0</tspan>;
</text><text x="60.00px" y="2286.40px" xml:space="preserve">        <tspan fill="#fe8019">foreach</tspan> (<tspan fill="#fabd2f">var</tspan> button <tspan fill="#fe8019">in</tspan> buttons) {
</text><text x="60.00px" y="2300.80px" xml:space="preserve">            totalButtonsWidth += button.Width;
</text><text x="60.00px" y="2315.20px" xml:space="preserve">        }
</text><text x="60.00px" y="2329.60px" xml:space="preserve">
</text><text x="60.00px" y="2344.00px" xml:space="preserve">        <tspan fill="#fabd2f">int</tspan> availableSpace = horizontalSpace / totalButtonsWidth;
</text><text x="60.00px" y="2358.40px" xml:space="preserve">        <tspan fill="#fabd2f">int</tspan> spacing = availableSpace / (btns.Count + <tspan fill="#d3869b">1</tspan>);
</text><text x="60.00px" y="2372.80px" xml:space="preserve">
</text><text x="60.00px" y="2387.20px" xml:space="preserve">        startX = (<tspan fill="#fe8019">this</tspan>.ClientSize.Width - horizontalSpace) / <tspan fill="#d3869b">2</tspan>;
</text><text x="60.00px" y="2401.60px" xml:space="preserve">        <tspan fill="#fabd2f">int</tspan> currentX = startX + spacing;
</text><text x="60.00px" y="2416.00px" xml:space="preserve">
</text><text x="60.00px" y="2430.40px" xml:space="preserve">        <tspan fill="#fe8019">foreach</tspan> (<tspan fill="#fabd2f">var</tspan> button <tspan fill="#fe8019">in</tspan> buttons) {
</text><text x="60.00px" y="2444.80px" xml:space="preserve">            button.Location = <tspan fill="#fe8019">new</tspan> Point(currentX, panel1.Bottom + <tspan fill="#d3869b">30</tspan>);
</text><text x="60.00px" y="2459.20px" xml:space="preserve">            currentX += button.Width + spacing;
</text><text x="60.00px" y="2473.60px" xml:space="preserve">        }
</text><text x="60.00px" y="2488.00px" xml:space="preserve">
</text><text x="60.00px" y="2502.40px" xml:space="preserve">        <tspan fill="#8ec07c">#endregion</tspan>
</text><text x="60.00px" y="2516.80px" xml:space="preserve">
</text><text x="60.00px" y="2531.20px" xml:space="preserve">        <tspan fill="#fe8019">foreach</tspan> (<tspan fill="#fabd2f">var</tspan> foreignkey <tspan fill="#fe8019">in</tspan> textBoxes.Where(x =&gt; (<tspan fill="#fabd2f">string</tspan>)x.Tag! == <tspan fill="#b8bb26">&quot;foreign&quot;</tspan>)) {
</text><text x="60.00px" y="2545.60px" xml:space="preserve">            <tspan fill="#fabd2f">var</tspan> idx = panel1.Controls.IndexOf(foreignkey);
</text><text x="60.00px" y="2560.00px" xml:space="preserve">            <tspan fill="#fe8019">if</tspan> (idx == -<tspan fill="#d3869b">1</tspan>) <tspan fill="#fe8019">continue</tspan>;
</text><text x="60.00px" y="2574.40px" xml:space="preserve">
</text><text x="60.00px" y="2588.80px" xml:space="preserve">            <tspan fill="#fabd2f">var</tspan> foreignkey_property_kvp = PropertyValues.First(x =&gt; x.Control == foreignkey);
</text><text x="60.00px" y="2603.20px" xml:space="preserve">
</text><text x="60.00px" y="2617.60px" xml:space="preserve">            <tspan fill="#fabd2f">var</tspan> textbox_size = panel1.Controls[idx].Size;
</text><text x="60.00px" y="2632.00px" xml:space="preserve">            <tspan fill="#fabd2f">var</tspan> textbox_location = panel1.Controls[idx].Location;
</text><text x="60.00px" y="2646.40px" xml:space="preserve">
</text><text x="60.00px" y="2660.80px" xml:space="preserve">            <tspan fill="#fabd2f">var</tspan> foreignkey_select_button = <tspan fill="#fe8019">new</tspan> MaterialButton {
</text><text x="60.00px" y="2675.20px" xml:space="preserve">                Text = <tspan fill="#b8bb26">&quot;Choose&quot;</tspan>,
</text><text x="60.00px" y="2689.60px" xml:space="preserve">                AutoSize = <tspan fill="#fe8019">false</tspan>,
</text><text x="60.00px" y="2704.00px" xml:space="preserve">                Type = MaterialButton.MaterialButtonType.Outlined,
</text><text x="60.00px" y="2718.40px" xml:space="preserve">                Size = textbox_size,
</text><text x="60.00px" y="2732.80px" xml:space="preserve">                Location = textbox_location
</text><text x="60.00px" y="2747.20px" xml:space="preserve">            };
</text><text x="60.00px" y="2761.60px" xml:space="preserve">
</text><text x="60.00px" y="2776.00px" xml:space="preserve">            <tspan fill="#928374" font-style="italic">// TODO: Fix the passthrough here</tspan>
</text><text x="60.00px" y="2790.40px" xml:space="preserve">            <tspan fill="#928374" font-style="italic">// Maybe modify signature of callback function to accomodate data?</tspan>
</text><text x="60.00px" y="2804.80px" xml:space="preserve">            foreignkey_select_button.Click += (s, e) =&gt; {
</text><text x="60.00px" y="2819.20px" xml:space="preserve">                ShowGCFR(<tspan fill="#fe8019">typeof</tspan>(FormSelectViewModel), foreignkey_property_kvp.Type!);
</text><text x="60.00px" y="2833.60px" xml:space="preserve">                <tspan fill="#fabd2f">var</tspan> formSelectViewModel = ((Master <tspan fill="#fe8019">as</tspan> FormSkeleton)!.CurrentForm <tspan fill="#fe8019">as</tspan> FormSelectViewModel)!;
</text><text x="60.00px" y="2848.00px" xml:space="preserve">                <tspan fill="#928374" font-style="italic">// TODO: Fix form passing through data for edit</tspan>
</text><text x="60.00px" y="2862.40px" xml:space="preserve">                <tspan fill="#928374" font-style="italic">// Create model and pass through</tspan>
</text><text x="60.00px" y="2876.80px" xml:space="preserve">
</text><text x="60.00px" y="2891.20px" xml:space="preserve">                <tspan fill="#fabd2f">var</tspan> needed_prop_vals = PropertyValues.Select(x =&gt; (x.Name, x.Value)).ToList();
</text><text x="60.00px" y="2905.60px" xml:space="preserve">
</text><text x="60.00px" y="2920.00px" xml:space="preserve">                <tspan fill="#fabd2f">var</tspan> temp_created_obj = <tspan fill="#fe8019">typeof</tspan>(T).GetMethod(<tspan fill="#b8bb26">&quot;CreateFromList&quot;</tspan>)!.Invoke(Activator.CreateInstance&lt;T&gt;(), [needed_prop_vals, <tspan fill="#fe8019">null</tspan>]);
</text><text x="60.00px" y="2934.40px" xml:space="preserve">
</text><text x="60.00px" y="2948.80px" xml:space="preserve">                <tspan fill="#fe8019">typeof</tspan>(FormSelectViewModel).
</text><text x="60.00px" y="2963.20px" xml:space="preserve">                    GetMethod(nameof(FormSelectViewModel.SetCallbackFromSelectType))!.
</text><text x="60.00px" y="2977.60px" xml:space="preserve">                    MakeGenericMethod(<tspan fill="#fe8019">typeof</tspan>(T)).
</text><text x="60.00px" y="2992.00px" xml:space="preserve">                    Invoke(formSelectViewModel, [FormSelectViewModel.SelectType.GetKey, temp_created_obj]);
</text><text x="60.00px" y="3006.40px" xml:space="preserve">            };
</text><text x="60.00px" y="3020.80px" xml:space="preserve">
</text><text x="60.00px" y="3035.20px" xml:space="preserve">            panel1.Controls.RemoveAt(idx);
</text><text x="60.00px" y="3049.60px" xml:space="preserve">            panel1.Controls.Add(foreignkey_select_button);
</text><text x="60.00px" y="3064.00px" xml:space="preserve">
</text><text x="60.00px" y="3078.40px" xml:space="preserve">            foreignkey_property_kvp.Value = () =&gt; foreignkey_select_button.Text;
</text><text x="60.00px" y="3092.80px" xml:space="preserve">            foreignkey_property_kvp.Control = foreignkey_select_button;
</text><text x="60.00px" y="3107.20px" xml:space="preserve">            PropertyValues[PropertyValues.IndexOf(PropertyValues.First(x =&gt; x.Name == foreignkey_property_kvp.Name))] = foreignkey_property_kvp;
</text><text x="60.00px" y="3121.60px" xml:space="preserve">        }
</text><text x="60.00px" y="3136.00px" xml:space="preserve">
</text><text x="60.00px" y="3150.40px" xml:space="preserve">        <tspan fill="#fe8019">foreach</tspan> (<tspan fill="#fabd2f">var</tspan> textbox_datetime <tspan fill="#fe8019">in</tspan> textBoxes.Where(x =&gt; (<tspan fill="#fabd2f">string</tspan>)x.Tag! == <tspan fill="#b8bb26">&quot;date&quot;</tspan>)) {
</text><text x="60.00px" y="3164.80px" xml:space="preserve">            <tspan fill="#fabd2f">var</tspan> textbox_datetime_idx = panel1.Controls.IndexOf(textbox_datetime);
</text><text x="60.00px" y="3179.20px" xml:space="preserve">            <tspan fill="#fe8019">if</tspan> (textbox_datetime_idx == -<tspan fill="#d3869b">1</tspan>) <tspan fill="#fe8019">continue</tspan>;
</text><text x="60.00px" y="3193.60px" xml:space="preserve">
</text><text x="60.00px" y="3208.00px" xml:space="preserve">            <tspan fill="#fabd2f">var</tspan> datetime_property_kvp = PropertyValues.First(x =&gt; x.Control == textbox_datetime);
</text><text x="60.00px" y="3222.40px" xml:space="preserve">
</text><text x="60.00px" y="3236.80px" xml:space="preserve">            <tspan fill="#fabd2f">var</tspan> textbox_size = panel1.Controls[textbox_datetime_idx].Size;
</text><text x="60.00px" y="3251.20px" xml:space="preserve">            <tspan fill="#fabd2f">var</tspan> textbox_location = panel1.Controls[textbox_datetime_idx].Location;
</text><text x="60.00px" y="3265.60px" xml:space="preserve">
</text><text x="60.00px" y="3280.00px" xml:space="preserve">            <tspan fill="#fabd2f">var</tspan> datetime_picker = <tspan fill="#fe8019">new</tspan> DateTimePicker {
</text><text x="60.00px" y="3294.40px" xml:space="preserve">                AutoSize = <tspan fill="#fe8019">false</tspan>,
</text><text x="60.00px" y="3308.80px" xml:space="preserve">                Size = textbox_size,
</text><text x="60.00px" y="3323.20px" xml:space="preserve">                Location = textbox_location
</text><text x="60.00px" y="3337.60px" xml:space="preserve">            };
</text><text x="60.00px" y="3352.00px" xml:space="preserve">
</text><text x="60.00px" y="3366.40px" xml:space="preserve">            panel1.Controls.RemoveAt(textbox_datetime_idx);
</text><text x="60.00px" y="3380.80px" xml:space="preserve">            panel1.Controls.Add(datetime_picker);
</text><text x="60.00px" y="3395.20px" xml:space="preserve">
</text><text x="60.00px" y="3409.60px" xml:space="preserve">            datetime_property_kvp.Value = () =&gt; datetime_picker.Value.ToString();
</text><text x="60.00px" y="3424.00px" xml:space="preserve">            datetime_property_kvp.Control = datetime_picker;
</text><text x="60.00px" y="3438.40px" xml:space="preserve">            PropertyValues[PropertyValues.IndexOf(PropertyValues.First(x =&gt; x.Name == datetime_property_kvp.Name))] = datetime_property_kvp;
</text><text x="60.00px" y="3452.80px" xml:space="preserve">        }
</text><text x="60.00px" y="3467.20px" xml:space="preserve">
</text><text x="60.00px" y="3481.60px" xml:space="preserve">        <tspan fill="#fe8019">foreach</tspan> (<tspan fill="#fabd2f">var</tspan> textbox_toggle <tspan fill="#fe8019">in</tspan> textBoxes.Where(x =&gt; (<tspan fill="#fabd2f">string</tspan>)x.Tag! == <tspan fill="#b8bb26">&quot;toggle&quot;</tspan>)) {
</text><text x="60.00px" y="3496.00px" xml:space="preserve">            <tspan fill="#fabd2f">var</tspan> textbox_toggle_idx = panel1.Controls.IndexOf(textbox_toggle);
</text><text x="60.00px" y="3510.40px" xml:space="preserve">            <tspan fill="#fe8019">if</tspan> (textbox_toggle_idx == -<tspan fill="#d3869b">1</tspan>) <tspan fill="#fe8019">continue</tspan>;
</text><text x="60.00px" y="3524.80px" xml:space="preserve">
</text><text x="60.00px" y="3539.20px" xml:space="preserve">            <tspan fill="#fabd2f">var</tspan> textbox_property_kvp = PropertyValues.First(x =&gt; x.Control == textbox_toggle);
</text><text x="60.00px" y="3553.60px" xml:space="preserve">            <tspan fill="#fabd2f">var</tspan> toggle_textbox_size = panel1.Controls[textbox_toggle_idx].Size;
</text><text x="60.00px" y="3568.00px" xml:space="preserve">            <tspan fill="#fabd2f">var</tspan> toggle_textbox_location = panel1.Controls[textbox_toggle_idx].Location;
</text><text x="60.00px" y="3582.40px" xml:space="preserve">
</text><text x="60.00px" y="3596.80px" xml:space="preserve">            <tspan fill="#fabd2f">var</tspan> checkbox = <tspan fill="#fe8019">new</tspan> MaterialCheckbox { AutoSize = <tspan fill="#fe8019">false</tspan>, Size = toggle_textbox_size, Location = toggle_textbox_location };
</text><text x="60.00px" y="3611.20px" xml:space="preserve">
</text><text x="60.00px" y="3625.60px" xml:space="preserve">            panel1.Controls.RemoveAt(textbox_toggle_idx);
</text><text x="60.00px" y="3640.00px" xml:space="preserve">            panel1.Controls.Add(checkbox);
</text><text x="60.00px" y="3654.40px" xml:space="preserve">
</text><text x="60.00px" y="3668.80px" xml:space="preserve">            textbox_property_kvp.Value = () =&gt; checkbox.Checked.ToString();
</text><text x="60.00px" y="3683.20px" xml:space="preserve">            textbox_property_kvp.Control = checkbox;
</text><text x="60.00px" y="3697.60px" xml:space="preserve">            PropertyValues[PropertyValues.IndexOf(PropertyValues.First(x =&gt; x.Name == textbox_property_kvp.Name))] = textbox_property_kvp;
</text><text x="60.00px" y="3712.00px" xml:space="preserve">        }
</text><text x="60.00px" y="3726.40px" xml:space="preserve">    }
</text><text x="60.00px" y="3740.80px" xml:space="preserve">
</text><text x="60.00px" y="3755.20px" xml:space="preserve">    <tspan fill="#928374" font-style="italic">// TODO: Deleting doesnt work right</tspan>
</text><text x="60.00px" y="3769.60px" xml:space="preserve">    <tspan fill="#fe8019">public</tspan> <tspan fill="#fe8019">void</tspan> Populate&lt;T&gt;(T obj) <tspan fill="#fe8019">where</tspan> T : IDatabaseModel {
</text><text x="60.00px" y="3784.00px" xml:space="preserve">        <tspan fill="#fabd2f">var</tspan> obj_props = obj!.GetType().GetProperties();
</text><text x="60.00px" y="3798.40px" xml:space="preserve">
</text><text x="60.00px" y="3812.80px" xml:space="preserve">        <tspan fill="#fe8019">foreach</tspan> (<tspan fill="#fabd2f">var</tspan> obj_prop <tspan fill="#fe8019">in</tspan> obj_props) {
</text><text x="60.00px" y="3827.20px" xml:space="preserve">            <tspan fill="#fabd2f">var</tspan> matching_property_value = PropertyValues.FirstOrDefault(property_value =&gt; property_value.Name == obj_prop.Name);
</text><text x="60.00px" y="3841.60px" xml:space="preserve">            <tspan fill="#fe8019">if</tspan> (matching_property_value <tspan fill="#fe8019">is</tspan> <tspan fill="#fe8019">null</tspan>) <tspan fill="#fe8019">continue</tspan>;
</text><text x="60.00px" y="3856.00px" xml:space="preserve">
</text><text x="60.00px" y="3870.40px" xml:space="preserve">            <tspan fill="#fe8019">if</tspan> (Attribute.GetCustomAttribute(obj_prop, <tspan fill="#fe8019">typeof</tspan>(DateAttribute)) != <tspan fill="#fe8019">null</tspan>) {
</text><text x="60.00px" y="3884.80px" xml:space="preserve">                (matching_property_value.Control <tspan fill="#fe8019">as</tspan> DateTimePicker)!.Value = Convert.ToDateTime(obj_prop.GetValue(obj, <tspan fill="#fe8019">null</tspan>));
</text><text x="60.00px" y="3899.20px" xml:space="preserve">            } <tspan fill="#fe8019">else</tspan> <tspan fill="#fe8019">if</tspan> (Attribute.GetCustomAttribute(obj_prop, <tspan fill="#fe8019">typeof</tspan>(ToggleAttribute)) != <tspan fill="#fe8019">null</tspan>) {
</text><text x="60.00px" y="3913.60px" xml:space="preserve">                (matching_property_value.Control <tspan fill="#fe8019">as</tspan> MaterialCheckbox)!.Checked = Convert.ToBoolean(obj_prop.GetValue(obj, <tspan fill="#fe8019">null</tspan>));
</text><text x="60.00px" y="3928.00px" xml:space="preserve">            } <tspan fill="#fe8019">else</tspan> <tspan fill="#fe8019">if</tspan> (Attribute.GetCustomAttribute(obj_prop, <tspan fill="#fe8019">typeof</tspan>(ForeignKeyAttribute)) != <tspan fill="#fe8019">null</tspan>) {
</text><text x="60.00px" y="3942.40px" xml:space="preserve">                (matching_property_value.Control <tspan fill="#fe8019">as</tspan> MaterialButton)!.Text = Convert.ToString(obj_prop.GetValue(obj, <tspan fill="#fe8019">null</tspan>));
</text><text x="60.00px" y="3956.80px" xml:space="preserve">            } <tspan fill="#fe8019">else</tspan> {
</text><text x="60.00px" y="3971.20px" xml:space="preserve">                (matching_property_value.Control <tspan fill="#fe8019">as</tspan> MaterialTextBox)!.Text = Convert.ToString(obj_prop.GetValue(obj, <tspan fill="#fe8019">null</tspan>));
</text><text x="60.00px" y="3985.60px" xml:space="preserve">            }
</text><text x="60.00px" y="4000.00px" xml:space="preserve">        }
</text><text x="60.00px" y="4014.40px" xml:space="preserve">        _edited_object = obj;
</text><text x="60.00px" y="4028.80px" xml:space="preserve">    }
</text><text x="60.00px" y="4043.20px" xml:space="preserve">}
</text>
</g>
</svg>
