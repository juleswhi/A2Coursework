<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.0//EN" "http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd">
<svg width="924.29" height="376.57" xmlns="http://www.w3.org/2000/svg">
<rect width="824.29" height="336.57" fill="#282828" x="40.00px" y="20.00px"/>
<g font-family="Jetbrains Mono NF" font-size="12.00px" fill="#ebdbb2" clip-path="url(#terminalMask)">
<text x="60.00px" y="54.40px" xml:space="preserve">﻿<tspan fill="#fe8019">namespace</tspan> Model;
</text><text x="60.00px" y="68.80px" xml:space="preserve"><tspan fill="#fe8019">public</tspan> <tspan fill="#fe8019">static</tspan> <tspan fill="#fe8019">class</tspan> ModelHelper {
</text><text x="60.00px" y="83.20px" xml:space="preserve">    <tspan fill="#fe8019">public</tspan> <tspan fill="#fe8019">static</tspan> <tspan fill="#fe8019">readonly</tspan> Type[] ModelTypes = [
</text><text x="60.00px" y="97.60px" xml:space="preserve">        <tspan fill="#fe8019">typeof</tspan>(Clean), <tspan fill="#fe8019">typeof</tspan>(CleaningEquipment), <tspan fill="#fe8019">typeof</tspan>(CleanJob),
</text><text x="60.00px" y="112.00px" xml:space="preserve">        <tspan fill="#fe8019">typeof</tspan>(Customer), <tspan fill="#fe8019">typeof</tspan>(Employee), <tspan fill="#fe8019">typeof</tspan>(Equipment),
</text><text x="60.00px" y="126.40px" xml:space="preserve">        <tspan fill="#fe8019">typeof</tspan>(Job), <tspan fill="#fe8019">typeof</tspan>(Stock), <tspan fill="#fe8019">typeof</tspan>(StockReorder),
</text><text x="60.00px" y="140.80px" xml:space="preserve">        ];
</text><text x="60.00px" y="155.20px" xml:space="preserve">
</text><text x="60.00px" y="169.60px" xml:space="preserve">    <tspan fill="#fe8019">public</tspan> <tspan fill="#fe8019">static</tspan> IEnumerable&lt;(<tspan fill="#fabd2f">string</tspan>, <tspan fill="#fabd2f">int</tspan>)&gt; GetPrimaryKey&lt;T&gt;(<tspan fill="#fe8019">this</tspan> T model) <tspan fill="#fe8019">where</tspan> T : IDatabaseModel {
</text><text x="60.00px" y="184.00px" xml:space="preserve">        <tspan fill="#fe8019">foreach</tspan> (<tspan fill="#fabd2f">var</tspan> prop <tspan fill="#fe8019">in</tspan> model.GetType().GetProperties()) {
</text><text x="60.00px" y="198.40px" xml:space="preserve">            <tspan fill="#fabd2f">var</tspan> attr = Attribute.GetCustomAttribute(prop, <tspan fill="#fe8019">typeof</tspan>(PrimaryKey));
</text><text x="60.00px" y="212.80px" xml:space="preserve">            <tspan fill="#fe8019">if</tspan> (attr <tspan fill="#fe8019">is</tspan> <tspan fill="#fe8019">null</tspan>) <tspan fill="#fe8019">continue</tspan>;
</text><text x="60.00px" y="227.20px" xml:space="preserve">            <tspan fill="#fe8019">yield</tspan> <tspan fill="#fe8019">return</tspan> (prop.Name, (<tspan fill="#fabd2f">int</tspan>)prop.GetValue(model)!);
</text><text x="60.00px" y="241.60px" xml:space="preserve">        }
</text><text x="60.00px" y="256.00px" xml:space="preserve">    }
</text><text x="60.00px" y="270.40px" xml:space="preserve">
</text><text x="60.00px" y="284.80px" xml:space="preserve">    <tspan fill="#fe8019">public</tspan> <tspan fill="#fe8019">static</tspan> <tspan fill="#fabd2f">string</tspan> FormatKeys&lt;T&gt;(<tspan fill="#fe8019">this</tspan> T model) <tspan fill="#fe8019">where</tspan> T : IDatabaseModel =&gt;
</text><text x="60.00px" y="299.20px" xml:space="preserve">        model.GetPrimaryKey().Select(x =&gt; <tspan fill="#b8bb26">$&quot;{x.Item1} = &apos;{x.Item2}&apos;&quot;</tspan>).Aggregate((x, y) =&gt; <tspan fill="#b8bb26">$&quot;{x} AND {y}&quot;</tspan>);
</text><text x="60.00px" y="313.60px" xml:space="preserve">}
</text>
</g>
</svg>
